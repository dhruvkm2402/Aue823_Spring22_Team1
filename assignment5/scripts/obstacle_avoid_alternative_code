#!/usr/bin/env python3
import rospy # Python library for ROS
from sensor_msgs.msg import LaserScan # LaserScan type message is defined in sensor_msgs
from geometry_msgs.msg import Twist #
import numpy as np

def callback(dt):
    left = min(min(dt.ranges[50:100]),15)
    right = min(min(dt.ranges[260:310]),15)
    front = min(min(dt.ranges[330:360] + dt.ranges[0:30]),10)
    
    
    print('-------------------------------------------')
    print('Range data at Left:  {}'.format(fleft))
    print('Range data at Right: {}'.format(fright))
    print('-------------------------------------------')
    thr1 = 0.5 # Laser scan range threshold

    if front > thr1 : # If no obstacles in front
        move.linear.x = 0.2 # move forward
        move.angular.z = 0.0 # do not rotate
        
    else:
        if left > thr1:         # if no obstacle on left
            move.linear.x = 0.0 # stop
            move.angular.z = 0.7 # rotate left
        elif right > thr1:
            move.linear.x = 0.0 # go forward (linear velocity)
            move.angular.z = -0.7 # rotate right
        

    pub.publish(move) # publish the move object


move = Twist() # Creates a Twist message type object
rospy.init_node('obstacle_avoidance_node') # Initializes a node
pub = rospy.Publisher("/cmd_vel", Twist, queue_size=10)  # Publisher object which will publish 

sub = rospy.Subscriber("/scan", LaserScan, callback)  # Subscriber object which will listen 

rospy.spin() # Loops until program is shut down

